[
  {
    "id": 1,
    "question": "What is Spring Framework?",
    "options": ["A JavaScript library", "A Java framework for enterprise applications", "A database", "A testing tool"],
    "answer": "A Java framework for enterprise applications",
    "explanation": "Spring is a comprehensive framework for building Java applications, offering support for dependency injection, aspect-oriented programming, transaction management, and more."
  },
  {
    "id": 2,
    "question": "What is Dependency Injection in Spring?",
    "options": ["Manual object creation", "A way to reduce dependencies", "A design pattern that allows Spring to manage object creation", "A database operation"],
    "answer": "A design pattern that allows Spring to manage object creation",
    "explanation": "Dependency Injection (DI) is a design pattern where the Spring container automatically injects required dependencies into a class instead of creating them manually."
  },
  {
    "id": 3,
    "question": "Which annotation is used to define a Spring Boot application?",
    "options": ["@Configuration", "@Component", "@SpringBootApplication", "@Service"],
    "answer": "@SpringBootApplication",
    "explanation": "@SpringBootApplication is a convenience annotation that combines @Configuration, @EnableAutoConfiguration, and @ComponentScan."
  },
  {
    "id": 4,
    "question": "What is the default scope of a Spring bean?",
    "options": ["prototype", "singleton", "request", "session"],
    "answer": "singleton",
    "explanation": "By default, Spring beans are singleton, meaning only one instance of the bean is created in the container."
  },
  {
    "id": 5,
    "question": "Which annotation is used for mapping HTTP requests to handler methods in Spring MVC?",
    "options": ["@Component", "@RequestMapping", "@Autowired", "@RestController"],
    "answer": "@RequestMapping",
    "explanation": "@RequestMapping is used to map web requests to specific handler classes or methods."
  },
  {
    "id": 6,
    "question": "What is the difference between @Component, @Service, and @Repository?",
    "options": [
      "They are exactly the same",
      "They are specializations of @Component with different semantic uses",
      "They are unrelated",
      "Only @Component works in Spring Boot"
    ],
    "answer": "They are specializations of @Component with different semantic uses",
    "explanation": "@Service and @Repository are specialized versions of @Component used for service and persistence layers, respectively."
  },
  {
    "id": 7,
    "question": "Which annotation is used for automatic dependency injection?",
    "options": ["@Bean", "@Autowired", "@Inject", "@Configuration"],
    "answer": "@Autowired",
    "explanation": "@Autowired tells Spring to automatically wire the required dependency into a bean."
  },
  {
    "id": 8,
    "question": "What is Spring Boot Starter?",
    "options": ["A test framework", "A collection of dependencies for rapid development", "A logging tool", "An IDE plugin"],
    "answer": "A collection of dependencies for rapid development",
    "explanation": "Spring Boot starters are pre-configured dependency descriptors that simplify the build configuration."
  },
  {
    "id": 9,
    "question": "How do you define a bean in Java configuration?",
    "options": ["Using @Bean inside a @Configuration class", "Using @Service", "Using @Entity", "Using @Value"],
    "answer": "Using @Bean inside a @Configuration class",
    "explanation": "@Bean tells Spring that the method instantiates, configures, and initializes a new object to be managed by the Spring container."
  },
  {
    "id": 10,
    "question": "What does @RestController do?",
    "options": [
      "Marks a class as a database repository",
      "Marks a class as a RESTful controller returning JSON/XML",
      "Marks a class as a configuration class",
      "Marks a bean as prototype"
    ],
    "answer": "Marks a class as a RESTful controller returning JSON/XML",
    "explanation": "@RestController is a combination of @Controller and @ResponseBody, used to create REST APIs."
  },
  {
    "id": 11,
    "question": "What is Spring Data JPA?",
    "options": [
      "A tool for database migrations",
      "A persistence framework simplifying data access with JPA",
      "A JDBC wrapper",
      "A NoSQL framework"
    ],
    "answer": "A persistence framework simplifying data access with JPA",
    "explanation": "Spring Data JPA provides repository support for JPA, eliminating boilerplate code for database access."
  },
  {
    "id": 12,
    "question": "Which annotation is used to mark a class as a configuration class in Spring?",
    "options": ["@Configuration", "@Component", "@RestController", "@Bean"],
    "answer": "@Configuration",
    "explanation": "@Configuration tells Spring that the class has bean definitions."
  },
  {
    "id": 13,
    "question": "What is the purpose of application.properties in Spring Boot?",
    "options": [
      "To store SQL queries",
      "To configure application settings",
      "To define HTML templates",
      "To compile code"
    ],
    "answer": "To configure application settings",
    "explanation": "application.properties (or application.yml) stores configuration like database settings, server ports, etc."
  },
  {
    "id": 14,
    "question": "How do you enable scheduling in Spring?",
    "options": ["@Scheduled", "@EnableScheduling", "Both", "None"],
    "answer": "Both",
    "explanation": "You enable scheduling using @EnableScheduling on a configuration class and mark scheduled tasks with @Scheduled."
  },
  {
    "id": 15,
    "question": "Which annotation is used to create a transactional method in Spring?",
    "options": ["@Transactional", "@Autowired", "@Service", "@Bean"],
    "answer": "@Transactional",
    "explanation": "@Transactional manages transactions automatically for methods annotated with it."
  },
  {
    "id": 16,
    "question": "What is Spring AOP?",
    "options": ["Application Oriented Programming", "Aspect Oriented Programming", "Advanced Object Processing", "None"],
    "answer": "Aspect Oriented Programming",
    "explanation": "Spring AOP provides aspect-oriented programming features, such as method interception and cross-cutting concerns handling."
  },
  {
    "id": 17,
    "question": "What is the use of @Value annotation in Spring?",
    "options": [
      "To define entity fields",
      "To inject values from properties files",
      "To mark beans as primary",
      "To map REST endpoints"
    ],
    "answer": "To inject values from properties files",
    "explanation": "@Value is used to inject values into fields from application.properties or application.yml."
  },
  {
    "id": 18,
    "question": "What is Spring Boot Actuator?",
    "options": [
      "A monitoring and management tool for Spring Boot applications",
      "A logging library",
      "A deployment tool",
      "A security module"
    ],
    "answer": "A monitoring and management tool for Spring Boot applications",
    "explanation": "Spring Boot Actuator provides production-ready features like health checks, metrics, and monitoring endpoints."
  },
  {
    "id": 19,
    "question": "Which embedded server is the default in Spring Boot?",
    "options": ["Tomcat", "Jetty", "Undertow", "WebLogic"],
    "answer": "Tomcat",
    "explanation": "Spring Boot uses an embedded Tomcat server by default."
  },
  {
    "id": 20,
    "question": "What is the difference between @Controller and @RestController?",
    "options": [
      "@Controller returns views, @RestController returns JSON/XML",
      "They are exactly the same",
      "@Controller is only for database access",
      "@RestController can only be used with WebFlux"
    ],
    "answer": "@Controller returns views, @RestController returns JSON/XML",
    "explanation": "@Controller is used for MVC web apps returning views, while @RestController is used for REST APIs returning data."
  },
  {
    "id": 21,
    "type": "MCQ",
    "question": "What is Spring Framework?",
    "options": ["A JavaScript library", "A Java framework for enterprise applications", "A database", "A testing tool"],
    "answer": "A Java framework for enterprise applications",
    "explanation": "Spring is a comprehensive framework for building Java applications, offering support for dependency injection, AOP, transaction management, and more."
  },
  {
    "id": 22,
    "type": "MCQ",
    "question": "Which annotation is used to define a Spring Boot application?",
    "options": ["@Configuration", "@Component", "@SpringBootApplication", "@Service"],
    "answer": "@SpringBootApplication",
    "explanation": "@SpringBootApplication is a convenience annotation that combines @Configuration, @EnableAutoConfiguration, and @ComponentScan."
  },
  {
    "id": 23,
    "type": "MCQ",
    "question": "What is the default scope of a Spring bean?",
    "options": ["prototype", "singleton", "request", "session"],
    "answer": "singleton",
    "explanation": "By default, Spring beans are singleton, meaning only one instance of the bean is created in the container."
  },
  {
    "id": 24,
    "type": "MCQ",
    "question": "Which annotation is used for automatic dependency injection in Spring?",
    "options": ["@Bean", "@Autowired", "@Inject", "@Configuration"],
    "answer": "@Autowired",
    "explanation": "@Autowired tells Spring to automatically wire the required dependency into a bean."
  },
  {
    "id": 25,
    "type": "MCQ",
    "question": "What is Spring Boot Starter?",
    "options": ["A test framework", "A collection of dependencies for rapid development", "A logging tool", "An IDE plugin"],
    "answer": "A collection of dependencies for rapid development",
    "explanation": "Spring Boot starters are pre-configured dependency descriptors that simplify the build configuration."
  },
  {
    "id": 26,
    "type": "MCQ",
    "question": "Which annotation is used to mark a class as a configuration class?",
    "options": ["@Configuration", "@Component", "@RestController", "@Bean"],
    "answer": "@Configuration",
    "explanation": "@Configuration tells Spring that the class contains bean definitions."
  },
  {
    "id": 27,
    "type": "MCQ",
    "question": "What is Spring Boot Actuator?",
    "options": [
      "A monitoring and management tool for Spring Boot applications",
      "A logging library",
      "A deployment tool",
      "A security module"
    ],
    "answer": "A monitoring and management tool for Spring Boot applications",
    "explanation": "Spring Boot Actuator provides production-ready features like health checks, metrics, and monitoring endpoints."
  },
  {
    "id": 28,
    "type": "MCQ",
    "question": "Which embedded server is the default in Spring Boot?",
    "options": ["Tomcat", "Jetty", "Undertow", "WebLogic"],
    "answer": "Tomcat",
    "explanation": "Spring Boot uses an embedded Tomcat server by default."
  },
  {
    "id": 29,
    "type": "MCQ",
    "question": "What does @RestController do?",
    "options": [
      "Marks a class as a database repository",
      "Marks a class as a RESTful controller returning JSON/XML",
      "Marks a class as a configuration class",
      "Marks a bean as prototype"
    ],
    "answer": "Marks a class as a RESTful controller returning JSON/XML",
    "explanation": "@RestController is a combination of @Controller and @ResponseBody, used to create REST APIs."
  },
  {
    "id": 30,
    "type": "MCQ",
    "question": "How do you enable scheduling in Spring?",
    "options": ["@Scheduled", "@EnableScheduling", "Both", "None"],
    "answer": "Both",
    "explanation": "You enable scheduling using @EnableScheduling on a config class and mark tasks with @Scheduled."
  },
  {
    "id": 31,
    "type": "Interview",
    "question": "Explain the difference between @Controller and @RestController in Spring.",
    "answer": "@Controller is used in MVC web apps to return views, whereas @RestController returns JSON/XML directly for REST APIs.",
    "explanation": "@RestController is a shorthand for @Controller + @ResponseBody, removing the need to annotate each method with @ResponseBody."
  },
  {
    "id": 32,
    "type": "Interview",
    "question": "How does Spring Boot simplify dependency management?",
    "answer": "It uses starters (predefined dependency sets) and auto-configuration to reduce boilerplate setup.",
    "explanation": "Instead of configuring everything manually, you add a starter like spring-boot-starter-web and Spring Boot configures it for you."
  },
  {
    "id": 33,
    "type": "Interview",
    "question": "What is Dependency Injection and why is it important in Spring?",
    "answer": "Dependency Injection is a design pattern where dependencies are injected by the container rather than created manually. It promotes loose coupling and testability.",
    "explanation": "Spring implements DI via constructors, setters, or field injection using @Autowired."
  },
  {
    "id": 34,
    "type": "Interview",
    "question": "What are Spring Profiles used for?",
    "answer": "Profiles allow you to define different configurations for different environments (e.g., dev, test, prod).",
    "explanation": "You can activate a profile using spring.profiles.active in application.properties."
  },
  {
    "id": 35,
    "type": "Interview",
    "question": "How does Spring Boot handle database configuration?",
    "answer": "Spring Boot auto-configures DataSource and JPA repositories if required properties are provided in application.properties.",
    "explanation": "You only need to specify properties like spring.datasource.url, and Spring Boot wires up the DataSource automatically."
  },
  {
    "id": 36,
    "type": "Interview",
    "question": "What is the difference between @Component, @Service, and @Repository?",
    "answer": "@Component is a generic stereotype, @Service is for service layer beans, and @Repository is for persistence layer beans (with additional exception translation).",
    "explanation": "They all register beans in the container, but @Service and @Repository provide semantic meaning and additional features."
  },
  {
    "id": 37,
    "type": "Interview",
    "question": "How does Spring Boot enable microservices development?",
    "answer": "Spring Boot provides embedded servers, auto-configuration, easy integration with Spring Cloud, and REST support, making microservices easier to build and deploy.",
    "explanation": "It reduces boilerplate code and offers production-ready features like health checks, monitoring, and externalized configuration."
  },
  {
    "id": 38,
    "type": "Interview",
    "question": "What is the role of Spring Security?",
    "answer": "Spring Security provides authentication, authorization, and protection against common attacks like CSRF, session fixation, and clickjacking.",
    "explanation": "It integrates with multiple identity providers and supports role-based access control."
  },
  {
    "id": 39,
    "type": "Interview",
    "question": "What are some advantages of using Spring Boot over traditional Spring?",
    "answer": "Auto-configuration, embedded servers, production-ready features (Actuator), reduced XML configuration, and opinionated defaults.",
    "explanation": "Spring Boot helps developers focus on business logic instead of setup and boilerplate."
  },
  {
    "id": 40,
    "type": "Interview",
    "question": "How would you secure a REST API in Spring Boot?",
    "answer": "By using Spring Security with JWT, OAuth2, or Basic Authentication depending on requirements.",
    "explanation": "Spring Security allows adding authentication filters, role-based authorization, and token validation."
  }
]